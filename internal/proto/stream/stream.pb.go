// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: stream/stream.proto

package streampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Record struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Ts      int64                  `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"` // event timestamp
	Wiki    string                 `protobuf:"bytes,2,opt,name=wiki,proto3" json:"wiki,omitempty"`
	Title   string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`     // page title
	Comment string                 `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"` // edit summary/comment
	User    string                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`       // editor username
	Bot     bool                   `protobuf:"varint,6,opt,name=bot,proto3" json:"bot,omitempty"`        // bot flag
	// populated by Tokenize/WCount nodes
	Word     string `protobuf:"bytes,10,opt,name=word,proto3" json:"word,omitempty"`                          // tokenized word
	WindowId int64  `protobuf:"varint,11,opt,name=window_id,json=windowId,proto3" json:"window_id,omitempty"` // tumbling window id e.g. ts/12000
	Count    int64  `protobuf:"varint,12,opt,name=count,proto3" json:"count,omitempty"`                       // current aggregate for (window_id, wiki, word)
	// internal routing/control
	Epoch         int64 `protobuf:"varint,20,opt,name=epoch,proto3" json:"epoch,omitempty"`         // barrier id
	Partition     int32 `protobuf:"varint,21,opt,name=partition,proto3" json:"partition,omitempty"` // partition id for routing
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_stream_stream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_stream_stream_proto_rawDescGZIP(), []int{0}
}

func (x *Record) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *Record) GetWiki() string {
	if x != nil {
		return x.Wiki
	}
	return ""
}

func (x *Record) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Record) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Record) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Record) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *Record) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Record) GetWindowId() int64 {
	if x != nil {
		return x.WindowId
	}
	return 0
}

func (x *Record) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Record) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Record) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_stream_stream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_stream_stream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_stream_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Ack) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *Ack) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_stream_stream_proto protoreflect.FileDescriptor

const file_stream_stream_proto_rawDesc = "" +
	"\n" +
	"\x13stream/stream.proto\x12\x06stream\"\xfd\x01\n" +
	"\x06Record\x12\x0e\n" +
	"\x02ts\x18\x01 \x01(\x03R\x02ts\x12\x12\n" +
	"\x04wiki\x18\x02 \x01(\tR\x04wiki\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x18\n" +
	"\acomment\x18\x04 \x01(\tR\acomment\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x10\n" +
	"\x03bot\x18\x06 \x01(\bR\x03bot\x12\x12\n" +
	"\x04word\x18\n" +
	" \x01(\tR\x04word\x12\x1b\n" +
	"\twindow_id\x18\v \x01(\x03R\bwindowId\x12\x14\n" +
	"\x05count\x18\f \x01(\x03R\x05count\x12\x14\n" +
	"\x05epoch\x18\x14 \x01(\x03R\x05epoch\x12\x1c\n" +
	"\tpartition\x18\x15 \x01(\x05R\tpartition\"-\n" +
	"\x03Ack\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason2.\n" +
	"\x05Stage\x12%\n" +
	"\x04Push\x12\x0e.stream.Record\x1a\v.stream.Ack(\x01B@Z>github.com/knakatasf/wiki-river/internal/proto/stream;streampbb\x06proto3"

var (
	file_stream_stream_proto_rawDescOnce sync.Once
	file_stream_stream_proto_rawDescData []byte
)

func file_stream_stream_proto_rawDescGZIP() []byte {
	file_stream_stream_proto_rawDescOnce.Do(func() {
		file_stream_stream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stream_stream_proto_rawDesc), len(file_stream_stream_proto_rawDesc)))
	})
	return file_stream_stream_proto_rawDescData
}

var file_stream_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stream_stream_proto_goTypes = []any{
	(*Record)(nil), // 0: stream.Record
	(*Ack)(nil),    // 1: stream.Ack
}
var file_stream_stream_proto_depIdxs = []int32{
	0, // 0: stream.Stage.Push:input_type -> stream.Record
	1, // 1: stream.Stage.Push:output_type -> stream.Ack
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_stream_proto_init() }
func file_stream_stream_proto_init() {
	if File_stream_stream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stream_stream_proto_rawDesc), len(file_stream_stream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_stream_proto_goTypes,
		DependencyIndexes: file_stream_stream_proto_depIdxs,
		MessageInfos:      file_stream_stream_proto_msgTypes,
	}.Build()
	File_stream_stream_proto = out.File
	file_stream_stream_proto_goTypes = nil
	file_stream_stream_proto_depIdxs = nil
}
